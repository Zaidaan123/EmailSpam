{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the GuardianMail application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user entity."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "username": {
          "type": "string",
          "description": "The user's chosen username."
        },
        "registrationDate": {
          "type": "string",
          "description": "The date and time when the user registered.",
          "format": "date-time"
        },
        "profileImageUrl": {
          "type": "string",
          "description": "URL of the user's profile image.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "email",
        "username",
        "registrationDate"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information. Path-based ownership ensures only the authenticated user (userId) can access their own data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user. This is used for path-based authorization."
            }
          ]
        }
      }
    ],
    "reasoning": "The data structure prioritizes authorization independence and clarity for security rules. User data is stored under `/users/{userId}` for path-based ownership. This eliminates the need for complex `get()` calls in security rules, as access control is directly tied to the user's ID. This approach supports QAPs because listing operations on `/users/{userId}` are naturally scoped and secured.  The structure also provides a foundation for future collaborative features via membership maps, which must be denormalized into subcollections to ensure authorization independence."
  }
}