/**
 * @fileoverview Firestore Security Rules for GuardianMail application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles. Each user can only access their own profile data.
 *
 * Data Structure:
 * All user data is stored under `/users/{userId}`.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Only authenticated users can create, update, or delete their profiles.
 * - Data validation is relaxed for prototyping purposes, focusing on ownership and relational integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     *   - auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (update) User with ID 'user123' updates their profile.
     *   - auth.uid: 'user123'
     * @allow (delete) User with ID 'user123' deletes their profile.
     *   - auth.uid: 'user123'
     * @deny (create) User with ID 'user123' attempts to create a profile for 'user456'.
     *   - auth.uid: 'user123'
     *   - request.resource.data.id: 'user456'
     * @deny (update) User with ID 'user123' attempts to update profile data for 'user456'.
     *   - auth.uid: 'user123'
     * @deny (delete) User with ID 'user123' attempts to delete profile data for 'user456'.
     *   - auth.uid: 'user123'
     * @principle Enforces document ownership for writes, validates relational integrity between user ID and document ID.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is disallowed to protect privacy

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

  }
}